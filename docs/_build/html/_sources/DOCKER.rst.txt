DOCKER:
-------
We strongly recommend using docker to run the pipeline. The external dependencies and R dependencies are all bundled in the container. The container prokseq-v2.1:v1 is available in https://hub.docker.com/repository/docker/snandids/prokseq-v2.1

**Step 1:** To pull the image from the Docker Hub registry:

> docker pull snandids/prokseq-v2.1:v1

**Step 2:** To Run:

> docker run -it snandids/prokseq-v2.1:v1

> sh-5.0 # cd prokseq

**Step 3:** Activate the environment

``> sh-5.0`` # source /etc/profile.d/conda.sh

``> sh-5.0`` # conda activate py36

``> (py36) sh-5.0`` # <YOU WILL GET THIS PROMPT>

**Step 4:** Run the example

Run the pipeline with the example files:

``> (py36) sh-5.0`` # python scripts/prokseq.py -s samples.bowtie.PEsample -p param.bowtie.yaml -n 4

The script will run with PE (paired-end) samples described in samples.bowtie.PEsample, and with the parameters defined in param.input.yaml. The program is submitted with four processors.

**Step 5:** How to manage data within your Docker containers.
Once the ProkSeq pipeline is working successfully with the example files, one can go for the real data.
There are two ways to manage data within your Docker containers.<br/>

   - **A. Method 1** - Using volume mounts <br/>

   - **B. Method 2** - Docker cp
	   
**A. Method 1:<br/>**
Volumes are the preferred mechanism for persisting data generated by and used by Docker containers.<br/>
Exit from the existing docker and mount the container with a volume.<br/>

**> docker run -it -v /home/user/prokseqData:/root/prokseq/ --name PROKSEQ snandids/prokseq-v2.1:v1**

Assuming the user has all the required data files (sample[fq/fastq], GTF, BED, genome/transcript files, etc) in the folder `/home/user/prokseqData`, the above command will mount the directory `/home/user/prokseqData` in `/root/prokseq/` inside container.<br/>

User can run the pipeline with appropriate sample files and parameter files inside the docker.
 
``> sh-5.0`` #cd prokseq

``> sh-5.0`` #source /etc/profile.d/conda.sh

``> sh-5.0`` #conda activate py36

``> (py36) sh-5.0`` # <YOU WILL GET THIS PROMPT>

**Modify the parameter file with appropriate path and desired parameters.<br/>**

**Modify the sample file with the fastq file names and the genome/transcript file names.**

``> (py36) sh-5.0`` #python scripts/prokseq.py -s samples_def_file -p param_def_file -n 4

Once done, the user can exit the docker. 

``> (py36) sh-5.0`` # exit

The output will remain in the `/home/user/prokseqData`.

To remove the container.

``> docker container rm PROKSEQ``

**B. Method 2:<br/>**
 To copy the files (sample[fq/fastq], GTF, BED, fasta (Genome/transcript), etc) to and from the container:<br/>
 Find out the containerID from another terminal. For example:<br/>
 Run the command

 ``> docker ps -a``

**Output (somewhat similar):<br/>**
 

CONTAINER ID:8f780c0a9969

IMAGE:snandids/prokseq-v2.1:v1

COMMAND:sh
             
CREATED:5 minutes ago 
            
STATUS:Up 5 minutes
                    
PORTS:fervent_feynman                         
                                                                                                                                                     

Then follow the following:<br/>

**Copy to the container: <br/>**


**In the example below, local test.fasta file is copied to the container `(/root/prokseq/)`.**

``> docker cp test.fasta 8f780c0a9969:/root/prokseq/test.fasta``


**Copy from the container:<br/>**
In the example below, a file from `/root/prokseq/` will be copied to the local working directory.<br/>


**Step 1: First create a file in the container:**

``> (py36) sh-5.0`` # touch TEST.txt

OR:

``> sh-5.0`` # touch TEST.txt

**Step 2: Copy the created new file from the container to the local working directory. From another termnal run,**

``> docker cp 8f780c0a9969:/root/prokseq/TEST.txt``.
